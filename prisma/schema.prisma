// @TODO: when DB restarts set missing createdAt and updatedAt
generator client {
  provider      = "prisma-client-js"
  // output        = "node_modules/@prisma/client/.prisma/client"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  GUEST
  ADMIN
}

model User {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  role          Role    @default(GUEST)
  // UNIQUE
  email         String  @unique
  emailVerified Boolean @default(false)
  // LOGIN
  accessToken   String?
  displayName   String?
  providerId    String?
  phoneNumber   String?
  photoURL      String?
  uid           String?
  // ADMIN 
  orgs          Org[]
  orgId         String? @db.ObjectId // provisional
}

enum Place {
  ONLINE
  INPLACE
  ATHOME
}

type NotifyConfig {
  confirmation Boolean @default(true)
  reminder     Boolean @default(true)
  survey       Boolean @default(true)
}

enum Per {
  DAY
  HOUR
}

// not in use
type Limit {
  bookings Int @default(6)
  per      Per @default(DAY)
}

model Service {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  slug          String       @unique
  points        Int          @default(1)
  price         Int
  // relations
  orgId         String       @db.ObjectId
  org           Org          @relation(fields: [orgId], references: [id])
  events        Event[]
  // config
  payment       Boolean      @default(false)
  config        NotifyConfig
  // status
  paid          Boolean      @default(false)
  place         Place        @default(INPLACE)
  isActive      Boolean      @default(true)
  archived      Boolean      @default(false)
  allowMultiple Boolean      @default(false)
  limit         Json?        @default("{\"bookings\":6,\"per\":\"day\"}") // @json because I'm still figuringt it out
  // numberOfSessionsInAnHour Int     @default(1)
  // horario
  duration      Int          @default(60) // mins
  weekDays      Json?
  // optionals
  address       String?
  seats         Int?         @default(1)
  photoURL      String?
  description   String?
  category      String?
  currency      String?      @default("MXN")
  employeeName  String? // @TODO: where is this requested?
}

type Social {
  facebook  String?
  instagram String?
  x         String?
  tiktok    String?
  linkedin  String?
  website   String?
  youtube   String?
}

type WebSiteConfig {
  template String @default("defaultTemplate")
  color    String @default("#705fe0")
}

model Org {
  isActive          Boolean        @default(true)
  // required
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  ownerId           String         @db.ObjectId
  owner             User           @relation(fields: [ownerId], references: [id])
  // about your company
  name              String
  slug              String         @unique
  // logo              String?
  shopKeeper        String?
  numberOfEmployees String?
  address           String?
  week              String?
  description       String?
  social            Social?
  // Business type
  businessType      String?
  // Times
  weekDays          Json?
  Service           Service[]
  // extra
  location          Json?
  websiteConfig     WebSiteConfig?
  Customer          Customer[]
}

enum EventStatus {
  OVERDUE
  CANCELED
  DELETED
  ACTIVE
}

model Customer {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  email       String   @unique
  orgId       String   @db.ObjectId
  org         Org      @relation(fields: [orgId], references: [id])
  // optionals
  displayName String?
  userId      String?  @db.ObjectId
  tel         String?
  comments    String?
  // Dates
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
  Event       Event[]
}

enum EventType {
  BLOCK
  EVENT
}

model Event {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  // mins for block
  type           EventType   @default(EVENT) // avoid scheduling even when multi enabled
  start          DateTime
  duration       Int         @default(60)
  orgId          String      @db.ObjectId
  userId         String?     @db.ObjectId // owner
  // mins for new
  customerId     String?     @db.ObjectId // client
  customer       Customer?   @relation(fields: [customerId], references: [id])
  employee       String?
  employeeId     String?     @db.ObjectId
  serviceId      String?     @db.ObjectId
  paid           Boolean     @default(false)
  notes          String?
  end            DateTime? // @TODO: make it required?
  dateString     String?
  allDay         Boolean     @default(false)
  // metadata
  status         EventStatus @default(ACTIVE)
  service        Service?    @relation(fields: [serviceId], references: [id])
  // optionals
  title          String?     @default("BLOCK")
  payment_method String?
  // Dates
  updatedAt      DateTime    @updatedAt
  createdAt      DateTime    @default(now())
  // utils
  legacyService  Json?
}

model Job {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  startDate DateTime
  type      String

  endDate DateTime?
  orgId   String?
  userId  String?
  eventId String?
}
