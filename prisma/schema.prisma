generator client {
  provider      = "prisma-client-js"
  // output        = "node_modules/@prisma/client/.prisma/client"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type NotifyConfig {
  confirmation Boolean
  reminder     Boolean
  survey       Boolean
}

enum Place {
  ONLINE
  INPLACE
  ATHOME
}

model Service {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String?
  category        String?
  points          Int          @default(0)
  photoURL        String?
  location        Json?
  place           Place        @default(INPLACE)
  address         Json?
  seats           Int?         @default(1)
  duration        Int // mins
  includesPayment Boolean      @default(false)
  price           Int
  currency        String?      @default("MXN")
  config          NotifyConfig
  employeeName    String?
  // relations
  events          Event[]
  orgId           String       @db.ObjectId
  org             Org          @relation(fields: [orgId], references: [id])
}

model Org {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  ownerId           String?   @db.ObjectId
  owner             User?     @relation(fields: [ownerId], references: [id])
  week              String?
  // about your company
  name              String
  slug              String    @unique
  logo              String?
  shopKeeper        String?
  numberOfEmployees String?
  address           String?
  // Business type
  businessType      String?
  // Times
  weekDays          Json?
  Service           Service[]
  // extra
  location          Json?
  Event             Event[]
}

enum Role {
  CUSTOMER
  GUEST
  ADMIN
}

model User {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  role          Role    @default(GUEST)
  // UNIQUE
  email         String  @unique
  emailVerified Boolean @default(false)
  // LOGIN
  accessToken   String?
  displayName   String?
  providerId    String?
  phoneNumber   String?
  photoURL      String?
  uid           String?
  // ADMIN 
  orgId         Int?
  Org           Org[]
  Event         Event[]
}

enum EventStatus {
  OVERDUE
  CANCELED
  DELETED
  ACTIVE
}

type Customer {
  loggedUserId String? @db.ObjectId // @TODO: re-visit this
  displayName  String?
  email        String?
  tel          String?
  comments     String?
}

enum EventType {
  BLOCK
  EVENT
}

model Event {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  type      EventType   @default(EVENT) // avoid scheduling even when multi enabled
  title     String?
  start     DateTime
  end       DateTime?
  duration  Int? // minutes
  allDay    Boolean     @default(false)
  status    EventStatus @default(ACTIVE)
  // OVERDUE | CANCELED | DELETED (no enums in sqlite) // now we have enums! =D
  service   Service?    @relation(fields: [serviceId], references: [id])
  serviceId String?     @db.ObjectId
  // scheduler
  userId    String?     @db.ObjectId
  user      User?       @relation(fields: [userId], references: [id])
  // org?
  orgId     String?     @db.ObjectId
  org       Org?        @relation(fields: [orgId], references: [id])
  // metadata
  customer  Customer?
}
